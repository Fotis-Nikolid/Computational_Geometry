LocalSearch:
(BELOW when i refer to the continuous L polygon verteces , i will refer them as L)

	-We run the algorithm for l = L and if no solution is found (Not a better polygon area, or no L is visible with edges etc)
     we run the algorithm again for l = L - 1 , until ether we find a valid solution or l = 0 in which case we return false
     (the algorithm failed)
    
    -Aside from the arguments that the exercise require,  we have integrated a -K option:

        -If not a K is given we run the algorithm , by checking every possible edge of the polygon with every L and then we choose the
         best (This is repeated until the threshold is met)

        -If K is given , we choose a random edge and we check every L and pick the best , we repeat that K times without 
         repicking the previously picked edges (This is repeated until the threshold is met)

    General algorithm:

        -Run solve function with l = L , if solve succedes stop the algorithm , if solve fails try for l = L -1

        -Solve : Repeat until threshold is met:
            -Set the best polygon to the current polygon and set the difference in area betwen the current polygon and the 
             best polygon to 0
            -Take every polygon edge or K random edges (depending on the K)
            -Call ReplaceEdgeWithBest_L for the current polygon and the edge that was picked
            -if ReplaceEdgeWithBest_L returns a bigger difference than the the current difference, replace the current best polygon
             with the one produced by ReplaceEdgeWithBest_L and replace the current difference with the returned one
            -After all edges are picked check if the best polygon is different than the current polygon , if it is replace
             the current one with the best one

        -ReplaceEdgeWithBest_L :
            -Given an edge find every L that does not contain ether of 2 vertices of the edge
            -After we remove the L from its current spot and put it(reversed) in the edge we chose, 3 new edges will be created and
             3 will be removed
            -Check if the 3 new edges intersect with one another
            -Check if the points of every new edge are visible (in this visabilty checks ignore the 3 edges that will be removed)
            -After the above checks we are sure that the new polygon will be simple
            -Construct the new polygon by rellocating the L from its current potition to the potition betwen the verteces of the
             edge that we picked
            -Check if the costucted polygon has better area than the current best, if it has replace current best one with the
             constructed and replace the difference with the current polygon area - new best polygon area
            -After all L are checked return the difference